import * as React from "react";
export declare type TableSortDirection = 'asc' | 'desc';
export interface ITableProps {
    id?: string;
    items: Object[];
    sortOn?: string;
    sortDirection?: TableSortDirection;
    onRowClick?: Function;
    onSort?: Function;
    emptyMessage?: React.ReactNode;
    loading?: boolean;
}
interface ITableState {
    sortingColumn: Object;
    sortDirection: TableSortDirection;
}
export declare const tableDefaultComparators: {
    numbers: (row1: any, row2: any, column: any) => number;
    strings: (row1: any, row2: any, column: any) => 0 | 1 | -1;
};
declare class Table extends React.Component<ITableProps, ITableState> {
    static Header: {
        (props: import("./table-header").ITableHeaderProps): JSX.Element;
        Element: any;
        Row: any;
        SortIndicator: any;
        Cell: any;
        defaultProps: {
            onSort: (column: any) => (event: any) => any;
        };
    };
    static Column: {
        (props: import("./table-column").ITableColumnProps): any;
        defaultProps: {
            sortable: boolean;
            truncate: boolean;
        };
    };
    static compare: {
        numbers: (row1: any, row2: any, column: any) => number;
        strings: (row1: any, row2: any, column: any) => 0 | 1 | -1;
    };
    static Container: any;
    static Element: any;
    static Body: any;
    static Row: any;
    static Cell: any;
    static defaultProps: {
        onRowClick: any;
        onSort: any;
        sortDirection: string;
        emptyMessage: string;
    };
    static EmptyState: ({ rows, children, loading }: {
        rows: any;
        children: any;
        loading: any;
    }) => JSX.Element;
    static LoadingIndicator: ({ loading, rows }: {
        loading: any;
        rows: any;
    }) => JSX.Element;
    constructor(props: any);
    defaultCellRenderer: (item: any, column: any) => any;
    defaultOnSort: (sortOnField: any, sortDirection: any) => void;
    inferColumnsFromChildren(children: any): any[];
    getSortingColumn(sortOnField: any): any;
    getComparator(items: any, sortingColumn: any): any;
    sortItems: ({ unsortedItems, sortingColumn, sortDirection }: {
        unsortedItems: any;
        sortingColumn: any;
        sortDirection: any;
    }) => any[];
    handleRowClicked: (item: any) => (evt: any) => void;
    render(): JSX.Element;
}
export default Table;
