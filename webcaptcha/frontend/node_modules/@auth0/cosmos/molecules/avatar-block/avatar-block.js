"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var styled_1 = __importDefault(require("../../styled"));
var __1 = require("../../");
var tokens_1 = require("../../tokens");
var container_styles_1 = __importDefault(require("../../_helpers/container-styles"));
var automation_attribute_1 = __importDefault(require("../../_helpers/automation-attribute"));
var link_1 = require("../../atoms/link");
var root_props_1 = require("../../_helpers/root-props");
var avatarSizes = {
    compact: 'small',
    default: 'medium',
    large: 'large'
};
var textSpacing = '12px';
var Text = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  margin-left: ", ";\n"], ["\n  margin-left: ", ";\n"])), textSpacing);
var Title = styled_1.default.span(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  line-height: normal;\n  color: ", ";\n  font-weight: ", ";\n\n  ", " {\n    line-height: normal;\n  }\n"], ["\n  line-height: normal;\n  color: ", ";\n  font-weight: ", ";\n\n  ", " {\n    line-height: normal;\n  }\n"])), tokens_1.colors.text.default, tokens_1.fonts.weight.medium, link_1.StyledLink);
var Subtitle = styled_1.default.span(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  line-height: normal;\n  color: ", ";\n  margin-top: ", ";\n  display: ", ";\n"], ["\n  line-height: normal;\n  color: ", ";\n  margin-top: ", ";\n  display: ", ";\n"])), tokens_1.colors.text.secondary, tokens_1.spacing.xxsmall, function (props) { return (props.size === 'compact' ? 'none' : 'block'); });
var getLinkedElement = function (props) { return function (element) {
    var link = props.href || props.link;
    if (!link) {
        return element;
    }
    if (typeof link === 'string') {
        link = { href: link, target: '_blank' };
    }
    return React.createElement(__1.Link, __assign({}, link), element);
}; };
var getTitle = function (props) { return React.createElement(Title, null, getLinkedElement(props)(props.title)); };
var getAvatar = function (props) {
    return getLinkedElement(props)(React.createElement(__1.Avatar, { icon: props.icon, image: props.image, size: avatarSizes[props.size], type: props.type }));
};
var AvatarBlock = function (props) {
    var title = getTitle(props);
    var avatar = getAvatar(props);
    var subtitle;
    if (props.subtitle) {
        subtitle = React.createElement(Subtitle, { size: props.size }, props.subtitle);
    }
    return (React.createElement(AvatarBlock.Element, __assign({}, automation_attribute_1.default('avatar-block'), root_props_1.rootProps(props)),
        avatar,
        React.createElement(Text, null,
            title,
            subtitle)));
};
AvatarBlock.Element = styled_1.default.span(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  ", ";\n\n  display: flex;\n  align-items: center;\n  justify-content: start;\n"], ["\n  ", ";\n\n  display: flex;\n  align-items: center;\n  justify-content: start;\n"])), container_styles_1.default);
AvatarBlock.defaultProps = {
    size: 'default'
};
var StyledAvatarBlock = AvatarBlock.Element;
exports.StyledAvatarBlock = StyledAvatarBlock;
exports.default = AvatarBlock;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=avatar-block.js.map