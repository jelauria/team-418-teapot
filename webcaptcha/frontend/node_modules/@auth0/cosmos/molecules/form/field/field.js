"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var automation_attribute_1 = __importDefault(require("../../../_helpers/automation-attribute"));
var container_styles_1 = __importDefault(require("../../../_helpers/container-styles"));
var uniqueId_1 = __importDefault(require("../../../_helpers/uniqueId"));
var checkbox_1 = __importDefault(require("../../../atoms/checkbox"));
var radio_1 = __importDefault(require("../../../atoms/radio"));
var switch_1 = __importDefault(require("../../../atoms/switch"));
var textarea_1 = __importDefault(require("../../../atoms/textarea"));
var styled_1 = __importDefault(require("../../../styled"));
var tokens_1 = require("../../../tokens");
var error_1 = __importDefault(require("../error"));
var form_context_1 = __importDefault(require("../form-context"));
var help_text_1 = __importDefault(require("../help-text"));
var label_1 = __importDefault(require("../label"));
var shouldFieldUseCheckboxStyle = function (props) {
    if (props.checkbox) {
        return true;
    }
    if (props.children) {
        var children = React.Children.toArray(props.children);
        var type = children[0].type;
        return type === checkbox_1.default || type === radio_1.default || type === checkbox_1.default.Group;
    }
    return false;
};
var _a = React.createContext({}), Provider = _a.Provider, Consumer = _a.Consumer;
var FieldInput = function (props) {
    var Component = props.Component, fieldProps = __rest(props, ["Component"]);
    if (Component) {
        return React.createElement(Component, __assign({}, fieldProps));
    }
    var children = fieldProps.children, id = fieldProps.id;
    return React.createElement(Provider, { value: { formFieldId: id } }, children);
};
var ariaDescribedBy = function (helperTextId, errorTextId) {
    if (errorTextId) {
        return { "aria-invalid": true, "aria-errormessage": errorTextId };
    }
    if (helperTextId) {
        return { "aria-describedby": helperTextId };
    }
    return {};
};
var applyAriaToFieldChild = function (children, inputId, helperTextId, errorTextId, isRequired) {
    return React.Children.map(children, function (child) {
        if (!child) {
            return null;
        }
        return React.cloneElement(child, __assign({ id: inputId }, ariaDescribedBy(helperTextId, errorTextId), { "aria-required": isRequired }));
    });
};
var getIdFromChild = function (child) { return child.props.id; };
var getIdFromChildren = function (rawChildren) {
    var children = React.Children.toArray(rawChildren);
    if (children.length === 0) {
        return null;
    }
    return getIdFromChild(children[0]);
};
var Field = function (props) {
    var id = getIdFromChildren(props.children) || uniqueId_1.default(props.label);
    var error = props.error, htmlFor = props.htmlFor, fieldProps = __rest(props, ["error", "htmlFor"]);
    var useCheckboxStyle = shouldFieldUseCheckboxStyle(props);
    var Label = useCheckboxStyle ? Field.CheckboxLabel : label_1.default;
    var FieldSetWrapper = useCheckboxStyle ? Field.FieldSetElement : React.Fragment;
    var helperTextId = props.helpText ? id + "-helper-text" : null;
    var errorTextId = props.error ? id + "-error-text" : null;
    return (React.createElement(form_context_1.default.Consumer, null, function (context) { return (React.createElement(FieldSetWrapper, null,
        React.createElement(Field.Element, __assign({ layout: context.layout, fullWidth: context.fullWidth }, automation_attribute_1.default("form.field")),
            React.createElement(Field.LabelLayout, { checkbox: useCheckboxStyle, layout: context.layout },
                React.createElement(Label, { htmlFor: id }, props.label),
                props.required && React.createElement(Field.RequiredIndicator, null)),
            React.createElement(Field.ContentLayout, __assign({ layout: context.layout }, automation_attribute_1.default("form.field.content")),
                props.fieldComponent ? (React.createElement(props.fieldComponent, __assign({ id: id, hasError: error ? true : false }, fieldProps, ariaDescribedBy(helperTextId, errorTextId)))) : (applyAriaToFieldChild(props.children, id, helperTextId, errorTextId, props.required)),
                (props.error || props.helpText) && (React.createElement(Field.FeedbackContainer, null,
                    props.error && React.createElement(error_1.default, { id: errorTextId }, props.error),
                    props.helpText && React.createElement(help_text_1.default, { id: helperTextId }, props.helpText))))))); }));
};
Field.Element = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", ";\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: ", ";\n\n  &:not(:last-child):not(:only-child) {\n    margin-bottom: ", ";\n  }\n\n  @media (min-width: 768px) {\n    grid-gap: ", ";\n\n    grid-template-columns: ", ";\n  }\n\n  ", " {\n    min-height: ", ";\n  }\n\n  ", " {\n    /* Adds a space so the label aligns with the switch */\n    @media (min-width: 768px) {\n      margin-top: ", ";\n    }\n  }\n"], ["\n  ", ";\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: ", ";\n\n  &:not(:last-child):not(:only-child) {\n    margin-bottom: ", ";\n  }\n\n  @media (min-width: 768px) {\n    grid-gap: ", ";\n\n    grid-template-columns: ", ";\n  }\n\n  ", " {\n    min-height: ", ";\n  }\n\n  ", " {\n    /* Adds a space so the label aligns with the switch */\n    @media (min-width: 768px) {\n      margin-top: ", ";\n    }\n  }\n"])), container_styles_1.default, tokens_1.spacing.xsmall, tokens_1.spacing.medium, function (props) { return (props.layout === "label-on-left" ? tokens_1.spacing.medium : tokens_1.spacing.xsmall); }, function (props) { return (props.layout === "label-on-left" ? "200px 1fr" : "1fr"); }, textarea_1.default.Element, tokens_1.misc.input.default.height, switch_1.default.Element, function (props) { return (props.layout === "label-on-left" ? "6px" : "0"); });
Field.RequiredIndicator = styled_1.default.span.attrs({ children: "*" })(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  color: red;\n  margin-left: ", "px;\n"], ["\n  color: red;\n  margin-left: ", "px;\n"])), tokens_1.spacing.unit / 2);
Field.FieldSetElement = styled_1.default.fieldset(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  &:not(:last-child):not(:only-child) {\n    margin-bottom: ", ";\n  }\n"], ["\n  &:not(:last-child):not(:only-child) {\n    margin-bottom: ", ";\n  }\n"])), tokens_1.spacing.medium);
Field.CheckboxLabel = styled_1.default(label_1.default).attrs({ as: "legend" })(templateObject_4 || (templateObject_4 = __makeTemplateObject([""], [""])));
Field.LabelLayout = styled_1.default.div(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  @media (min-width: 768px) {\n    text-align: ", ";\n    padding-top: ", ";\n  }\n"], ["\n  @media (min-width: 768px) {\n    text-align: ", ";\n    padding-top: ", ";\n  }\n"])), function (props) { return (props.layout === "label-on-left" ? "right" : "left"); }, function (props) { return (!props.checkbox && props.layout === "label-on-left" ? tokens_1.misc.inputs.padding : "0"); });
Field.ContentLayout = styled_1.default.div(templateObject_6 || (templateObject_6 = __makeTemplateObject([""], [""])));
Field.displayName = "Form Field";
Field.FeedbackContainer = styled_1.default.div(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n  margin-top: ", ";\n"], ["\n  margin-top: ", ";\n"])), tokens_1.spacing.xsmall);
Field.defaultProps = {
    label: "",
    helpText: null,
    error: null
};
Field.ContextConsumer = Consumer;
Field.Error = error_1.default;
exports.default = Field;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7;
//# sourceMappingURL=field.js.map