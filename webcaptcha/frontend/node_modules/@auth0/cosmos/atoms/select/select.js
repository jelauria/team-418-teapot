"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var react_select_1 = __importStar(require("react-select"));
var Async_1 = __importDefault(require("react-select/lib/Async"));
var automation_attribute_1 = __importDefault(require("../../_helpers/automation-attribute"));
var form_1 = __importDefault(require("../../molecules/form"));
var styled_1 = __importDefault(require("../../styled"));
var tokens_1 = require("../../tokens");
var _simple_select_1 = __importDefault(require("../_simple-select"));
var components_1 = require("./components");
var defaultGetOptionValue = function (option) { return option.value; };
var selectTheme = __assign({}, react_select_1.defaultTheme, { colors: __assign({}, react_select_1.defaultTheme.colors, { danger: tokens_1.colors.input.borderError, primary: tokens_1.colors.input.borderFocus }), borderRadius: tokens_1.misc.radius, spacing: {
        menuGutter: 0,
        baseUnit: tokens_1.spacing.unit,
        controlHeight: tokens_1.misc.input.default.height
    } });
var cosmosToReactSelect = {
    options: function (cosmosOptions) {
        return cosmosOptions.map(function (_a) {
            var items = _a.items, groupName = _a.groupName, disabled = _a.disabled, label = _a.label, text = _a.text, otherProperties = __rest(_a, ["items", "groupName", "disabled", "label", "text"]);
            return (__assign({ isDisabled: disabled, label: groupName || label || text, options: items ? cosmosToReactSelect.options(items) : undefined }, otherProperties));
        });
    },
    value: function (valueProp, options, getOptionValue) {
        if (getOptionValue === void 0) { getOptionValue = defaultGetOptionValue; }
        if (valueProp === null || typeof valueProp === "undefined") {
            return null;
        }
        if (valueProp.constructor.name === "Array") {
            return valueProp.map(function (item) { return cosmosToReactSelect.value(item, options, getOptionValue); });
        }
        var matchValue = function (option) { return getOptionValue(option) === valueProp; };
        var valueFound = null;
        options.forEach(function (option) {
            if (option.options && option.options.constructor.name === "Array") {
                option.options.forEach(function (subOption) {
                    if (matchValue(subOption)) {
                        valueFound = subOption;
                    }
                });
            }
        });
        if (valueFound !== null) {
            return valueFound;
        }
        return options.find(matchValue);
    },
    styles: function (props) { return ({
        menuPortal: components_1.Menu.portalTheme,
        menu: components_1.Menu.theme,
        groupHeading: components_1.GroupHeading.theme,
        group: components_1.Group.theme,
        menuList: components_1.MenuList.theme,
        control: function (provided, state) {
            return props.hasError
                ? __assign({}, provided, { borderColor: tokens_1.colors.input.borderError, boxShadow: "0 0 0 " + (state.isFocused ? 1 : 0) + "px " + tokens_1.colors.input.borderError, "&:hover": {
                        borderColor: tokens_1.colors.input.borderError
                    }, "&:focus": {
                        borderColor: tokens_1.colors.input.borderError,
                        boxShadow: "0 0 0 2px " + tokens_1.colors.input.borderError
                    } }) : provided;
        }
    }); }
};
var oneOrMore = function (options, getOptionValue) {
    if (getOptionValue === void 0) { getOptionValue = defaultGetOptionValue; }
    if (options === null) {
        return null;
    }
    if (options.constructor.name === "Array") {
        return options.map(getOptionValue);
    }
    return getOptionValue(options);
};
var Select = (function (_super) {
    __extends(Select, _super);
    function Select(props) {
        var _this = _super.call(this, props) || this;
        _this.componentOverrides = {
            SingleValue: react_select_1.components.SingleValue,
            MultiValue: components_1.MultiValue,
            DropdownIndicator: components_1.DropdownIndicator,
            LoadingIndicator: components_1.LoadingIndicator,
            ClearIndicator: components_1.ClearIndicator,
            GroupHeading: components_1.GroupHeading,
            Menu: components_1.Menu,
            MenuList: components_1.MenuList,
            Option: components_1.Option,
            Group: components_1.Group,
            IndicatorSeparator: function () { return null; }
        };
        _this.state = { menuIsOpen: props.defaultMenuOpen || false };
        _this.handleScroll = _this.handleScroll.bind(_this);
        return _this;
    }
    Select.prototype.componentDidMount = function () {
        document.addEventListener("scroll", this.handleScroll, true);
        if (this.props.defaultMenuOpen) {
            this.forceUpdate();
        }
    };
    Select.prototype.componentWillUnmount = function () {
        document.removeEventListener("scroll", this.handleScroll, true);
    };
    Select.prototype.handleScroll = function () {
        if (this.state.menuIsOpen) {
            this.forceUpdate();
        }
    };
    Select.prototype.updateMenuState = function (newState) {
        var _this = this;
        return function () { return _this.setState({ menuIsOpen: newState }); };
    };
    Select.prototype.render = function () {
        var _this = this;
        var props = this.props;
        if (!(props.async ||
            props.searchable ||
            props.multiple ||
            props.customOptionRenderer ||
            props.customValueRenderer ||
            props.getOptionValue)) {
            return React.createElement(_simple_select_1.default, __assign({}, props));
        }
        var options = cosmosToReactSelect.options(props.options);
        var defaultOptions = props.defaultOptions ? cosmosToReactSelect.options(props.defaultOptions) : null;
        if (props.customOptionRenderer) {
            this.componentOverrides.Option = components_1.optionRenderer(props.customOptionRenderer);
        }
        if (props.customValueRenderer) {
            this.componentOverrides.SingleValue = components_1.valueRenderer(props.customValueRenderer);
        }
        var value = props.async ? props.value : cosmosToReactSelect.value(props.value, options, props.getOptionValue);
        var styles = cosmosToReactSelect.styles(props);
        var searchable = props.async || props.searchable;
        var noOptionsMessage = props.noOptionsMessage
            ? typeof props.noOptionsMessage === "function"
                ? props.noOptionsMessage
                : function () { return props.noOptionsMessage; }
            : function () { return "No options"; };
        var SelectProvider = props.async ? Async_1.default : react_select_1.default;
        var onChange = function (options) {
            var newValue = props.async ? options : oneOrMore(options, props.getOptionValue);
            if (props.onChange) {
                props.onChange({ target: { name: props.name, value: newValue } });
            }
        };
        return (React.createElement(Select.Wrapper, __assign({}, automation_attribute_1.default("select.wrapper"), { style: props.style }),
            React.createElement(form_1.default.Field.ContextConsumer, null, function (context) { return (React.createElement(SelectProvider, { onChange: onChange, onFocus: props.onFocus, onBlur: props.onBlur, isClearable: true, isDisabled: props.disabled, isMulti: props.multiple, isSearchable: searchable, isLoading: props.loading, onMenuOpen: _this.updateMenuState(true), onMenuClose: _this.updateMenuState(false), menuPortalTarget: !!document ? document.body : null, menuIsOpen: props.defaultMenuOpen, defaultValue: props.defaultValue, getOptionValue: props.getOptionValue, placeholder: props.placeholder, options: options, loadOptions: props.loadOptions, components: _this.componentOverrides, noOptionsMessage: noOptionsMessage, defaultOptions: defaultOptions, theme: selectTheme, autoFocus: props.autoFocus, name: props.name, value: value, styles: styles, key: value ? value.length : 0, id: props.id || context.formFieldId })); })));
    };
    Select.Wrapper = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([""], [""])));
    Select.defaultProps = {
        options: [],
        placeholder: "",
        searchable: false
    };
    return Select;
}(React.Component));
exports.default = Select;
var templateObject_1;
//# sourceMappingURL=select.js.map