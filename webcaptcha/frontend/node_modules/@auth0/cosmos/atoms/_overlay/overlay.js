"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var ReactDOM = __importStar(require("react-dom"));
var styled_1 = __importDefault(require("../../styled"));
var tokens_1 = require("../../tokens");
var layers = {
    overlayBackdrop: 20,
    overlay: 30
};
var keyCodes = {
    escape: 27
};
exports.overlayContentSizes = {
    small: "480px",
    medium: "640px",
    large: "800px"
};
var Overlay = (function (_super) {
    __extends(Overlay, _super);
    function Overlay(props) {
        var _this = _super.call(this, props) || this;
        _this.contentElementRef = React.createRef();
        _this.handleMouseDown = function (evt) {
            var _a = _this.props, closeOnBackdropClick = _a.closeOnBackdropClick, open = _a.open, onClose = _a.onClose;
            var clickWasOnBackdrop = _this.contentElementRef.current && !_this.contentElementRef.current.contains(evt.target);
            if (open && closeOnBackdropClick && clickWasOnBackdrop && onClose) {
                onClose();
            }
        };
        _this.handleDocumentKeyDown = function (evt) {
            var _a = _this.props, closeOnEscape = _a.closeOnEscape, open = _a.open, onClose = _a.onClose;
            var escapeWasPressed = evt.which === keyCodes.escape;
            if (open && closeOnEscape && escapeWasPressed) {
                evt.preventDefault();
                if (onClose) {
                    onClose();
                }
            }
        };
        _this.state = { hasBeenMounted: false };
        return _this;
    }
    Overlay.getSizeForOverlay = function (propValue) {
        if (typeof propValue === "number") {
            return propValue + "px";
        }
        return exports.overlayContentSizes[propValue];
    };
    Overlay.prototype.componentDidMount = function () {
        this.mountElement = document.createElement("div");
        document.body.appendChild(this.mountElement);
        document.addEventListener("keydown", this.handleDocumentKeyDown);
        this.setState(function (prevState, props) { return ({
            hasBeenMounted: true
        }); });
    };
    Overlay.prototype.componentWillUnmount = function () {
        document.body.removeChild(this.mountElement);
        document.removeEventListener("keydown", this.handleDocumentKeyDown);
    };
    Overlay.prototype.render = function () {
        var _a = this.props, open = _a.open, children = _a.children, contentSize = _a.contentSize;
        if (!this.state.hasBeenMounted) {
            return null;
        }
        var content = open ? (React.createElement(Overlay.Backdrop, { onMouseDown: this.handleMouseDown },
            React.createElement(Overlay.Element, { contentSize: contentSize, ref: this.contentElementRef }, children))) : null;
        return ReactDOM.createPortal(content, this.mountElement);
    };
    Overlay.defaultProps = {
        closeOnBackdropClick: true,
        closeOnEscape: true,
        open: false
    };
    Overlay.Backdrop = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    position: fixed;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    z-index: ", ";\n    background: hsla(0, 12%, 95%, 0.95);\n    display: flex;\n    justify-content: center;\n  "], ["\n    position: fixed;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    z-index: ", ";\n    background: hsla(0, 12%, 95%, 0.95);\n    display: flex;\n    justify-content: center;\n  "])), layers.overlayBackdrop);
    Overlay.Element = styled_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    width: 100%;\n    margin: ", " ", ";\n    pointer-events: none;\n    display: inline-block;\n\n    /* Since the focus trap is adding divs around the dialog box, the max width prop should be here */\n    max-width: ", ";\n  "], ["\n    width: 100%;\n    margin: ", " ", ";\n    pointer-events: none;\n    display: inline-block;\n\n    /* Since the focus trap is adding divs around the dialog box, the max width prop should be here */\n    max-width: ", ";\n  "])), tokens_1.spacing.xlarge, tokens_1.spacing.small, function (props) { return Overlay.getSizeForOverlay(props.contentSize); });
    return Overlay;
}(React.Component));
exports.default = Overlay;
var templateObject_1, templateObject_2;
//# sourceMappingURL=overlay.js.map