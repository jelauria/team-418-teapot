"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var automation_attribute_1 = __importDefault(require("../../_helpers/automation-attribute"));
var styled_1 = __importDefault(require("../../styled"));
var tokens_1 = require("../../tokens");
var icon_1 = __importDefault(require("../icon"));
var spinner_1 = __importDefault(require("../spinner"));
var tooltip_1 = __importDefault(require("../tooltip"));
var appearances = {
    default: {
        text: tokens_1.colors.button.default.text,
        icon: tokens_1.colors.button.default.icon,
        background: tokens_1.colors.button.default.background,
        border: tokens_1.colors.button.default.border,
        hoverBackground: tokens_1.colors.button.default.backgroundHover,
        hoverBorder: tokens_1.colors.button.default.borderHover,
        focusBackground: tokens_1.colors.button.default.backgroundFocus,
        focusBorder: tokens_1.colors.button.default.borderFocus,
        activeBackground: tokens_1.colors.button.default.backgroundActive,
        activeBorder: tokens_1.colors.button.default.borderActive,
        loadingInverse: false
    },
    primary: {
        text: tokens_1.colors.button.primary.text,
        icon: tokens_1.colors.button.primary.icon,
        background: tokens_1.colors.button.primary.background,
        border: tokens_1.colors.button.primary.border,
        hoverBackground: tokens_1.colors.button.primary.backgroundHover,
        hoverBorder: tokens_1.colors.button.primary.borderHover,
        focusBackground: tokens_1.colors.button.primary.backgroundFocus,
        focusBorder: tokens_1.colors.button.primary.borderFocus,
        activeBackground: tokens_1.colors.button.primary.backgroundActive,
        activeBorder: tokens_1.colors.button.primary.borderActive,
        loadingInverse: true
    },
    secondary: {
        text: tokens_1.colors.button.secondary.text,
        icon: tokens_1.colors.button.secondary.icon,
        background: tokens_1.colors.button.secondary.background,
        border: tokens_1.colors.button.secondary.border,
        hoverBackground: tokens_1.colors.button.secondary.backgroundHover,
        hoverBorder: tokens_1.colors.button.secondary.borderHover,
        focusBackground: tokens_1.colors.button.secondary.backgroundFocus,
        focusBorder: tokens_1.colors.button.secondary.borderFocus,
        activeBackground: tokens_1.colors.button.secondary.backgroundActive,
        activeBorder: tokens_1.colors.button.secondary.borderActive,
        loadingInverse: false
    },
    cta: {
        text: tokens_1.colors.button.cta.text,
        icon: tokens_1.colors.button.cta.icon,
        background: tokens_1.colors.button.cta.background,
        border: tokens_1.colors.button.cta.border,
        hoverBackground: tokens_1.colors.button.cta.backgroundHover,
        hoverBorder: tokens_1.colors.button.cta.borderHover,
        focusBackground: tokens_1.colors.button.cta.backgroundFocus,
        focusBorder: tokens_1.colors.button.cta.borderFocus,
        activeBackground: tokens_1.colors.button.cta.backgroundActive,
        activeBorder: tokens_1.colors.button.cta.borderActive,
        loadingInverse: true
    },
    destructive: {
        text: tokens_1.colors.button.destructive.text,
        icon: tokens_1.colors.button.destructive.icon,
        background: tokens_1.colors.button.destructive.background,
        border: tokens_1.colors.button.destructive.border,
        hoverBackground: tokens_1.colors.button.destructive.backgroundHover,
        hoverBorder: tokens_1.colors.button.destructive.borderHover,
        focusBackground: tokens_1.colors.button.destructive.backgroundFocus,
        focusBorder: tokens_1.colors.button.destructive.borderFocus,
        activeBackground: tokens_1.colors.button.destructive.backgroundActive,
        activeBorder: tokens_1.colors.button.destructive.borderActive,
        loadingInverse: true
    },
    link: {
        text: tokens_1.colors.button.link.text,
        icon: tokens_1.colors.button.link.icon,
        background: "transparent",
        border: "transparent",
        hoverText: tokens_1.colors.button.link.hover,
        hoverBackground: "transparent",
        hoverBorder: "transparent",
        focusText: tokens_1.colors.button.link.focus,
        focusBackground: "transparent",
        focusBorder: "transparent",
        loadingInverse: false
    }
};
var states = {
    success: {
        text: tokens_1.colors.button.success.text,
        icon: tokens_1.colors.button.success.icon,
        background: tokens_1.colors.button.success.background,
        border: tokens_1.colors.button.success.border,
        hoverBackground: tokens_1.colors.button.success.backgroundHover,
        hoverBorder: tokens_1.colors.button.success.borderHover,
        focusBackground: tokens_1.colors.button.success.backgroundFocus,
        focusBorder: tokens_1.colors.button.success.borderFocus,
        activeBackground: tokens_1.colors.button.success.backgroundActive,
        activeBorder: tokens_1.colors.button.success.borderActive
    }
};
var sizes = {
    large: {
        lineHeight: tokens_1.misc.button.large.height,
        minWidth: "96px",
        padding: tokens_1.spacing.medium
    },
    default: {
        lineHeight: tokens_1.misc.button.default.height,
        minWidth: "96px",
        padding: tokens_1.spacing.small
    },
    compressed: {
        lineHeight: tokens_1.misc.button.compressed.height,
        minWidth: "auto",
        padding: tokens_1.spacing.small
    },
    small: {
        lineHeight: tokens_1.misc.button.small.height,
        minWidth: "auto",
        padding: tokens_1.spacing.xsmall
    }
};
var getAttributes = function (props) {
    var appearanceStyles = appearances[props.appearance] ? appearances[props.appearance] : appearances.default;
    var sizeStyles = sizes[props.size] ? sizes[props.size] : sizes.default;
    var styles = __assign({}, appearanceStyles, sizeStyles);
    if (props.success) {
        styles = __assign({}, styles, states.success);
    }
    if (props.loading) {
        styles.background = styles.hoverBackground;
        styles.focusBackground = styles.hoverBackground;
        styles.activeBackground = styles.hoverBackground;
        styles.border = styles.hoverBorder;
        styles.focusBorder = styles.hoverBorder;
        styles.activeBorder = styles.hoverBorder;
    }
    if (props.icon && !props.text) {
        styles.padding = tokens_1.spacing.xsmall;
        styles.minWidth = "36px";
        styles.icon = tokens_1.colors.button.link.icon;
    }
    return styles;
};
var ButtonContent = function (props) {
    var content = [];
    var icon = props.success ? "check" : props.icon;
    var iconNode = icon ? React.createElement(icon_1.default, { key: "icon", size: 16, name: icon, color: getAttributes(props).icon }) : null;
    if (props.loading) {
        content.push(React.createElement(spinner_1.default, { key: "spinner", inverse: getAttributes(props).loadingInverse }));
    }
    else if (iconNode && props.iconAlign === "left") {
        content.push(iconNode);
    }
    if (props.text) {
        content.push(React.createElement(Button.Text, { key: "text" }, props.text));
    }
    if (iconNode && props.iconAlign === "right") {
        content.push(iconNode);
    }
    var Element = props.href ? Button.LinkElement : Button.Element;
    return React.createElement(Element, __assign({}, props), content);
};
var Button = function (_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    var button = React.createElement(ButtonContent, __assign({}, automation_attribute_1.default("button"), props, { text: children }));
    if (props.label) {
        return (React.createElement(tooltip_1.default, { content: props.label, defaultVisible: props.labelDefaultVisible }, button));
    }
    return button;
};
Button.Element = styled_1.default.button(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: inline-flex;\n  vertical-align: middle;\n  align-items: center;\n  justify-content: center;\n\n  min-width: ", ";\n  min-height: ", ";\n  line-height: ", ";\n\n  /* Safari button margins reset */\n  /* See https://github.com/google/material-design-lite/issues/4008 */\n  margin-top: 0;\n  margin-left: 0;\n\n  text-transform: uppercase;\n  white-space: nowrap;\n  letter-spacing: 1px;\n  font-size: 13px;\n  font-weight: ", ";\n\n  background: ", ";\n  border: 1px solid ", ";\n  border-radius: ", ";\n\n  color: ", ";\n\n  padding: 0 ", ";\n\n  opacity: ", ";\n  cursor: ", ";\n  pointer-events: ", ";\n  transition: border-color ", ", background ", ";\n\n  > *:not(:last-child):not(:only-child) {\n    margin-right: ", ";\n  }\n\n  ", " {\n    color: ", ";\n  }\n\n  &:hover {\n    color: ", ";\n    background: ", ";\n    border-color: ", ";\n  }\n\n  &:focus {\n    background: ", ";\n    border-color: ", ";\n    outline: none;\n  }\n\n  &:active {\n    background: ", ";\n    border-color: ", ";\n    outline: none;\n  }\n"], ["\n  display: inline-flex;\n  vertical-align: middle;\n  align-items: center;\n  justify-content: center;\n\n  min-width: ", ";\n  min-height: ", ";\n  line-height: ", ";\n\n  /* Safari button margins reset */\n  /* See https://github.com/google/material-design-lite/issues/4008 */\n  margin-top: 0;\n  margin-left: 0;\n\n  text-transform: uppercase;\n  white-space: nowrap;\n  letter-spacing: 1px;\n  font-size: 13px;\n  font-weight: ", ";\n\n  background: ", ";\n  border: 1px solid ", ";\n  border-radius: ", ";\n\n  color: ", ";\n\n  padding: 0 ", ";\n\n  opacity: ", ";\n  cursor: ", ";\n  pointer-events: ", ";\n  transition: border-color ", ", background ", ";\n\n  > *:not(:last-child):not(:only-child) {\n    margin-right: ", ";\n  }\n\n  ", " {\n    color: ", ";\n  }\n\n  &:hover {\n    color: ", ";\n    background: ", ";\n    border-color: ", ";\n  }\n\n  &:focus {\n    background: ", ";\n    border-color: ", ";\n    outline: none;\n  }\n\n  &:active {\n    background: ", ";\n    border-color: ", ";\n    outline: none;\n  }\n"])), function (props) { return getAttributes(props).minWidth; }, function (props) { return getAttributes(props).lineHeight; }, function (props) { return getAttributes(props).lineHeight; }, tokens_1.fonts.weight.medium, function (props) { return getAttributes(props).background; }, function (props) { return getAttributes(props).border; }, tokens_1.misc.radius, function (props) { return getAttributes(props).text; }, function (props) { return getAttributes(props).padding; }, function (props) { return (props.disabled ? 0.5 : 1); }, function (props) { return (props.disabled ? "not-allowed" : "pointer"); }, function (props) { return (props.disabled || props.loading || props.success ? "none" : null); }, tokens_1.misc.animationDuration, tokens_1.misc.animationDuration, function (props) { return (props.text ? tokens_1.spacing.xsmall : 0); }, icon_1.default.Element, function (props) { return getAttributes(props).text; }, function (props) { return getAttributes(props).hoverText || getAttributes(props).text; }, function (props) { return getAttributes(props).hoverBackground; }, function (props) { return getAttributes(props).hoverBorder; }, function (props) { return getAttributes(props).focusBackground; }, function (props) { return getAttributes(props).focusBorder; }, function (props) { return getAttributes(props).activeBackground; }, function (props) { return getAttributes(props).activeBorder; });
Button.Text = styled_1.default.span(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  display: inline-block;\n  vertical-align: middle;\n  line-height: normal;\n  /* Sub-pixel position adjustment */\n  /* See: https://github.com/auth0/cosmos/pull/947 */\n  /* See: https://github.com/auth0/cosmos/pull/1045 */\n  margin-top: 1px;\n"], ["\n  display: inline-block;\n  vertical-align: middle;\n  line-height: normal;\n  /* Sub-pixel position adjustment */\n  /* See: https://github.com/auth0/cosmos/pull/947 */\n  /* See: https://github.com/auth0/cosmos/pull/1045 */\n  margin-top: 1px;\n"])));
Button.LinkElement = styled_1.default(Button.Element).attrs({ as: "a" })(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  text-decoration: none;\n"], ["\n  text-decoration: none;\n"])));
Button.defaultProps = {
    size: "default",
    appearance: "default",
    icon: null,
    iconAlign: "left",
    disabled: false,
    loading: false,
    success: false
};
exports.default = Button;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=button.js.map