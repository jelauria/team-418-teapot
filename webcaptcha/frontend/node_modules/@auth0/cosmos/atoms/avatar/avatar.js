"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var __1 = require("../../");
var automation_attribute_1 = __importDefault(require("../../_helpers/automation-attribute"));
var avatar_url_1 = __importDefault(require("../../_helpers/avatar-url"));
var styled_1 = __importDefault(require("../../styled"));
var tokens_1 = require("../../tokens");
var icon_1 = __importDefault(require("../icon"));
var iconSizes = {
    xsmall: 14,
    small: 16,
    medium: 20,
    large: 24,
    xlarge: 36,
    xxlarge: 52
};
var sources = {
    image: 'image',
    fallback: 'fallback',
    gravatar: 'gravatar',
    icon: 'icon'
};
var imageForAvatar = function (source, handleError) {
    if (React.isValidElement(source)) {
        return source;
    }
    return (React.createElement(__1.Image, { width: "100%", height: "100%", fit: "cover", src: source, onError: function (event) {
            try {
                event.target.removeAttribute('src');
            }
            catch (e) {
                event.target.src = undefined;
            }
            event.target.onerror = undefined;
            event.target.onError = undefined;
            handleError(event);
        } }));
};
var getImageForAvatar = function (props, source, onError) {
    var errorHandler = function (_a) {
        var discard = _a.discard;
        return function (event) { return onError(discard, event); };
    };
    switch (source) {
        case sources.icon:
            return React.createElement(icon_1.default, { name: props.icon, size: iconSizes[props.size] });
        case sources.gravatar:
            return imageForAvatar(avatar_url_1.default(props.email, props.initials), errorHandler({ discard: sources.gravatar }));
        case sources.image:
            return imageForAvatar(props.image, errorHandler({ discard: sources.image }));
        default:
            return imageForAvatar(avatar_url_1.default(null, null, props.type), onError);
    }
};
var Avatar = (function (_super) {
    __extends(Avatar, _super);
    function Avatar(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { imageErrored: false, gravatarErrored: false };
        _this.discardSource = _this.discardSource.bind(_this);
        return _this;
    }
    Avatar.prototype.discardSource = function (source) {
        switch (source) {
            case sources.image:
                return this.setState({ imageErrored: true });
            case sources.gravatar:
                return this.setState({ gravatarErrored: true });
            default:
                return;
        }
    };
    Avatar.prototype.getSource = function () {
        var _a = this.state, imageErrored = _a.imageErrored, gravatarErrored = _a.gravatarErrored;
        var _b = this.props, email = _b.email, initials = _b.initials, icon = _b.icon, image = _b.image;
        if (icon) {
            return sources.icon;
        }
        if (imageErrored && gravatarErrored) {
            return sources.fallback;
        }
        if (image && !imageErrored) {
            return sources.image;
        }
        if ((email || initials) && !gravatarErrored) {
            return sources.gravatar;
        }
        return sources.fallback;
    };
    Avatar.prototype.render = function () {
        var source = this.getSource();
        var image = getImageForAvatar(this.props, this.getSource(), this.discardSource);
        return (React.createElement(Avatar.Element, __assign({ type: this.props.type, size: this.props.size }, automation_attribute_1.default('avatar'), this.props), image));
    };
    Avatar.defaultProps = {
        size: 'medium',
        type: 'user'
    };
    Avatar.Element = styled_1.default.span(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    min-width: ", ";\n    width: ", ";\n    height: ", ";\n    background-color: ", ";\n    border: ", ";\n    border-radius: ", ";\n\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n\n    /* This allows to pass an SVG tag to the image prop and it will render correctly. This is not needed. We can remove this if we change the \"image\" prop to only accept a string */\n    img,\n    svg {\n      height: 100%;\n      width: 100%;\n    }\n\n    ", " {\n      line-height: 0;\n      /* Try to remove line-height and set display: inline-flex; */\n    }\n  "], ["\n    min-width: ", ";\n    width: ", ";\n    height: ", ";\n    background-color: ", ";\n    border: ", ";\n    border-radius: ", ";\n\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n\n    /* This allows to pass an SVG tag to the image prop and it will render correctly. This is not needed. We can remove this if we change the \"image\" prop to only accept a string */\n    img,\n    svg {\n      height: 100%;\n      width: 100%;\n    }\n\n    ", " {\n      line-height: 0;\n      /* Try to remove line-height and set display: inline-flex; */\n    }\n  "])), function (props) { return tokens_1.misc.avatar[props.size]; }, function (props) { return tokens_1.misc.avatar[props.size]; }, function (props) { return tokens_1.misc.avatar[props.size]; }, tokens_1.colors.base.grayLightest, function (props) { return (props.type === 'resource' ? "1px solid " + tokens_1.colors.base.grayLight : 'none'); }, function (props) { return (props.type === 'resource' ? '3px' : '50%'); }, icon_1.default.Element);
    return Avatar;
}(React.Component));
var StyledAvatar = Avatar.Element;
exports.StyledAvatar = StyledAvatar;
exports.default = Avatar;
var templateObject_1;
//# sourceMappingURL=avatar.js.map