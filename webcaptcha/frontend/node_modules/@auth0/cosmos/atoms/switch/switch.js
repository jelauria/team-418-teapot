"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var automation_attribute_1 = __importDefault(require("../../_helpers/automation-attribute"));
var form_1 = __importDefault(require("../../molecules/form"));
var styled_1 = __importStar(require("../../styled"));
var tokens_1 = require("../../tokens");
var Checkbox = styled_1.default.input(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  width: 0;\n  opacity: 0;\n  position: absolute;\n"], ["\n  width: 0;\n  opacity: 0;\n  position: absolute;\n"])));
var Toggle = styled_1.default.span(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  display: inline-block;\n  width: 55px;\n  height: var(--switch-height);\n  border-radius: 21px;\n  background: ", ";\n  cursor: ", ";\n  position: relative;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 4px;\n    left: 6px;\n    height: 24px;\n    width: 24px;\n    border-radius: 24px;\n    background: ", ";\n    box-shadow: 0 0 1px 0 rgba(0, 0, 0, 0.25), 0 4px 11px 0 rgba(0, 0, 0, 0.08),\n      -1px 3px 3px 0 rgba(0, 0, 0, 0.14);\n    transition: transform ", " ease, width ", ",\n      left ", ";\n    transform: translateX(", ");\n  }\n\n  ", ";\n"], ["\n  display: inline-block;\n  width: 55px;\n  height: var(--switch-height);\n  border-radius: 21px;\n  background: ", ";\n  cursor: ", ";\n  position: relative;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 4px;\n    left: 6px;\n    height: 24px;\n    width: 24px;\n    border-radius: 24px;\n    background: ", ";\n    box-shadow: 0 0 1px 0 rgba(0, 0, 0, 0.25), 0 4px 11px 0 rgba(0, 0, 0, 0.08),\n      -1px 3px 3px 0 rgba(0, 0, 0, 0.14);\n    transition: transform ", " ease, width ", ",\n      left ", ";\n    transform: translateX(", ");\n  }\n\n  ",
    ";\n"])), function (props) { return (props.on ? tokens_1.colors.base.green : tokens_1.colors.base.grayLight); }, function (props) { return (props.readOnly ? "not-allowed" : "pointer"); }, tokens_1.colors.base.white, tokens_1.misc.animationDuration, tokens_1.misc.animationDuration, tokens_1.misc.animationDuration, function (props) { return (props.on ? '20px' : 0); }, function (props) {
    return props.readOnly
        ? styled_1.css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n          opacity: 0.4;\n        "], ["\n          opacity: 0.4;\n        "]))) : styled_1.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n          &:active {\n            &:before {\n              width: 30px;\n              left: ", ";\n            }\n          }\n        "], ["\n          &:active {\n            &:before {\n              width: 30px;\n              left: ", ";\n            }\n          }\n        "])), function (props) { return (props.on ? '0' : '6px'); });
});
var Label = styled_1.default.label(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  height: var(--switch-height);\n\n  span {\n    display: block;\n    font-size: ", ";\n    font-weight: ", ";\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    color: ", ";\n\n    margin-left: ", ";\n    margin-right: ", ";\n    text-align: ", ";\n\n    /*\n    In order to make the switch always the same width\n    we are setting a fixed height and overlapping the switch labels\n    */\n    height: var(--switch-height);\n    line-height: var(--switch-height);\n\n    &:last-child {\n      /* Moves the second label up to overlap the first */\n      margin-top: calc(var(--switch-height) * -1);\n    }\n\n    &[aria-hidden='true'] {\n      visibility: hidden;\n    }\n    /* if the label is empty, then remove the node so it doesn't create a margin */\n    &:empty {\n      display: none;\n    }\n  }\n"], ["\n  height: var(--switch-height);\n\n  span {\n    display: block;\n    font-size: ", ";\n    font-weight: ", ";\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    color: ", ";\n\n    margin-left: ", ";\n    margin-right: ", ";\n    text-align: ", ";\n\n    /*\n    In order to make the switch always the same width\n    we are setting a fixed height and overlapping the switch labels\n    */\n    height: var(--switch-height);\n    line-height: var(--switch-height);\n\n    &:last-child {\n      /* Moves the second label up to overlap the first */\n      margin-top: calc(var(--switch-height) * -1);\n    }\n\n    &[aria-hidden='true'] {\n      visibility: hidden;\n    }\n    /* if the label is empty, then remove the node so it doesn't create a margin */\n    &:empty {\n      display: none;\n    }\n  }\n"])), tokens_1.fonts.size.small, tokens_1.fonts.weight.normal, tokens_1.colors.text.secondary, function (props) { return (props.labelPosition == 'left' ? '0' : tokens_1.spacing.small); }, function (props) { return (props.labelPosition == 'left' ? tokens_1.spacing.small : '0'); }, function (props) { return (props.labelPosition == 'left' ? 'right' : 'left'); });
var Switch = (function (_super) {
    __extends(Switch, _super);
    function Switch(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { on: props.on };
        return _this;
    }
    Switch.prototype.onToggle = function (e) {
        var _this = this;
        e.preventDefault();
        e.stopPropagation();
        if (this.props.readOnly) {
            return;
        }
        this.setState(function (currentState) {
            if (_this.props.onChange) {
                _this.props.onChange(!currentState.on);
            }
            else if (_this.props.onToggle) {
                _this.props.onToggle(!currentState.on);
            }
            return { on: !currentState.on };
        });
    };
    Switch.prototype.componentWillReceiveProps = function (newProps) {
        if (newProps.on !== this.state.on) {
            this.setState({ on: newProps.on });
        }
    };
    Switch.prototype.render = function () {
        var _this = this;
        var _a = __read(this.props.accessibleLabels, 2), onLabel = _a[0], offLabel = _a[1];
        var checkbox = (React.createElement(form_1.default.Field.ContextConsumer, null, function (context) { return (React.createElement(Checkbox, { type: "checkbox", checked: _this.state.on, readOnly: true, id: _this.props.id || context.formFieldId })); }));
        var elements = React.createElement(React.Fragment, null, checkbox);
        var label = (React.createElement(Label, { labelPosition: this.props.labelPosition, key: "switch-label" },
            React.createElement("span", { "aria-hidden": this.state.on }, offLabel),
            React.createElement("span", { "aria-hidden": !this.state.on }, onLabel)));
        var toggle = React.createElement(Toggle, { on: this.state.on, readOnly: this.props.readOnly, key: "switch-toggle" });
        if (this.props.labelPosition == 'left') {
            elements = (React.createElement(React.Fragment, null,
                checkbox,
                this.props.hideAccessibleLabels ? null : label,
                toggle));
        }
        else if (this.props.labelPosition == 'right') {
            elements = (React.createElement(React.Fragment, null,
                checkbox,
                toggle,
                this.props.hideAccessibleLabels ? null : label));
        }
        return (React.createElement(Switch.Element, __assign({ onClick: this.onToggle.bind(this) }, automation_attribute_1.default('switch'), this.props), elements));
    };
    Switch.displayName = 'Switch';
    Switch.defaultProps = {
        onToggle: null,
        onChange: null,
        on: false,
        accessibleLabels: ['Enabled', 'Disabled'],
        hideAccessibleLabels: false,
        readOnly: false,
        labelPosition: 'right'
    };
    Switch.Element = styled_1.default.span(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n    --switch-height: 32px;\n\n    display: inline-flex;\n    align-items: center;\n    vertical-align: middle;\n    height: var(--switch-height);\n    position: relative;\n\n    input:focus ~ ", " {\n      box-shadow: 0 0 0 2px ", ";\n    }\n  "], ["\n    --switch-height: 32px;\n\n    display: inline-flex;\n    align-items: center;\n    vertical-align: middle;\n    height: var(--switch-height);\n    position: relative;\n\n    input:focus ~ ", " {\n      box-shadow: 0 0 0 2px ", ";\n    }\n  "])), Toggle, tokens_1.colors.base.blue);
    return Switch;
}(React.Component));
exports.StyledSwitch = Switch.Element;
exports.default = Switch;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=switch.js.map