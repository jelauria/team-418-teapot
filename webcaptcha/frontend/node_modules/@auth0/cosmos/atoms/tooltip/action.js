"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var tooltip_1 = __importDefault(require("./tooltip"));
var ActionTooltip = (function (_super) {
    __extends(ActionTooltip, _super);
    function ActionTooltip(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { tooltipContent: null, taskIsRunning: false };
        return _this;
    }
    ActionTooltip.prototype.componentWillUnmount = function () {
        this.clearTimer();
    };
    ActionTooltip.prototype.clearTimer = function () {
        if (this.timer) {
            clearTimeout(this.timer);
        }
    };
    ActionTooltip.prototype.resetState = function () {
        if (!this.state.taskIsRunning) {
            this.clearTimer();
            this.setState({ tooltipContent: null });
        }
    };
    ActionTooltip.prototype.preprocessContent = function () {
        var rawContent = this.props.content;
        return typeof rawContent === 'string' ? { default: rawContent } : rawContent;
    };
    ActionTooltip.prototype.setTooltipContent = function (newContent, additionalState) {
        var _this = this;
        if (additionalState === void 0) { additionalState = {}; }
        var content = this.preprocessContent();
        this.setState(__assign({ tooltipContent: newContent }, additionalState));
        this.clearTimer();
        if (newContent === content.default) {
            return;
        }
        var resetDelay = this.props.resetDelay;
        this.timer = window.setTimeout(function () { return _this.setState({ tooltipContent: content.default }); }, resetDelay);
    };
    ActionTooltip.prototype.processAction = function () {
        var _this = this;
        var _a = this.props, children = _a.children, resetDelay = _a.resetDelay;
        var button = children;
        var content = this.preprocessContent();
        if (!button) {
            return null;
        }
        var newHandler = function (event) {
            _this.resetState();
            if (content.loading) {
                _this.setTooltipContent(content.loading, { taskIsRunning: true });
            }
            else {
                _this.setState({ taskIsRunning: true });
            }
            Promise.resolve(button.props.onClick(event))
                .then(function (result) {
                return _this.setTooltipContent(content.success || content.default, { taskIsRunning: false });
            })
                .catch(function () {
                return _this.setTooltipContent(content.error || 'Something did not work', {
                    taskIsRunning: false
                });
            });
        };
        var onMouseLeave = function (ev) {
            if (button.props.onMouseLeave) {
                button.props.onMouseLeave(ev);
            }
            _this.resetState();
        };
        return React.cloneElement(button, {
            onClick: newHandler,
            appearance: 'link',
            onMouseLeave: onMouseLeave
        });
    };
    ActionTooltip.prototype.render = function () {
        var tooltipContent = this.state.tooltipContent;
        var content = this.preprocessContent();
        var children = this.processAction();
        return (React.createElement(tooltip_1.default, { content: tooltipContent ? tooltipContent : content.default, children: children }));
    };
    ActionTooltip.defaultProps = {
        resetDelay: 5000
    };
    return ActionTooltip;
}(React.Component));
exports.default = ActionTooltip;
//# sourceMappingURL=action.js.map