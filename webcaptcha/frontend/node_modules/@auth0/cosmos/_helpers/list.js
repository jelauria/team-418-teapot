"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
exports.excludeDrawer = function (child, type) {
    var newChildren = React.Children.map(child.props.children, function (child) {
        if (!child || child.type === type) {
            return null;
        }
        return child;
    });
    return React.cloneElement(child, { children: newChildren });
};
exports.getDrawer = function (child, drawerIsOpen, type) {
    var drawer = React.Children.map(child.props.children, function (child) {
        if (!child || child.type !== type) {
            return null;
        }
        var props = child.props;
        return React.cloneElement(child, { hidden: !drawerIsOpen, 'aria-label': props.description });
    });
    return drawer;
};
exports.isListExpandable = function (child, type) {
    var isPresent = false;
    var arrowIsVisible = true;
    React.Children.map(child.props.children, function (item) {
        if (item && item.type === type) {
            isPresent = true;
            if (item.props.hidden) {
                arrowIsVisible = false;
            }
        }
    });
    return [isPresent, arrowIsVisible];
};
exports.onItemClickHandler = function (props, child) {
    if (!props.onItemClick) {
        return undefined;
    }
    return function (ev) { return props.onItemClick(ev, child.props); };
};
//# sourceMappingURL=list.js.map