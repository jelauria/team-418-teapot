"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
function widthString(props, propName, componentName) {
    function buildError(reason) {
        if (reason === void 0) { reason = 'The value should be a positive number plus the unit.'; }
        var lines = [
            "The \"" + propName + "\" prop's value of the " + componentName + " is invalid.",
            reason,
            'Example: 200px, 40%.'
        ];
        return new Error(lines.join('\n'));
    }
    var prop = props[propName];
    if (!prop) {
        return undefined;
    }
    var expression = new RegExp(/(-?)([0-9]+(\.?)[0-9]+)(px|%)/);
    if (!expression.test(prop)) {
        return buildError();
    }
    var _a = __read(prop.match(expression), 4), text = _a[0], sign = _a[1], strNumber = _a[2], unit = _a[3];
    var number = parseFloat(strNumber);
    var isNegativeNumber = sign === '-';
    var isRelativeWidthMoreThan100 = number > 100 && unit === '%';
    if (isNegativeNumber) {
        return buildError('The number must be positive.');
    }
    if (isRelativeWidthMoreThan100) {
        return buildError('Relative widths are allowed up to 100%.');
    }
    return undefined;
}
exports.default = widthString;
//# sourceMappingURL=width-string-prop-validator.js.map