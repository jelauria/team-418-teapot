"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
function pageInputWidth(page) {
    var charWidth = 8;
    var baseWidth = 50;
    var pageAsString = page.toString();
    var pageCharLength = pageAsString.length;
    return pageCharLength * charWidth + baseWidth;
}
exports.pageInputWidth = pageInputWidth;
function pagesFromItems(items, perPage) {
    return Math.ceil(items / perPage);
}
exports.pagesFromItems = pagesFromItems;
function changePageIfAppropiate(_a) {
    var rawNextPage = _a.rawNextPage, total = _a.total, perPage = _a.perPage, onPageChanged = _a.onPageChanged, _b = _a.ignoreNextPageCheck, ignoreNextPageCheck = _b === void 0 ? false : _b;
    var nextPage = parseInt(rawNextPage, 0);
    var pageCount = pagesFromItems(total, perPage);
    var nextPageExists = nextPage > 0 && nextPage <= pageCount;
    var shouldCallNextPageHandler = ignoreNextPageCheck || nextPageExists;
    if (shouldCallNextPageHandler && typeof onPageChanged === 'function') {
        onPageChanged(nextPage);
    }
}
exports.changePageIfAppropiate = changePageIfAppropiate;
function totals(page, perPage, items) {
    if (items === void 0) { items = 0; }
    var toRecord = page * perPage;
    var fromRecord = toRecord - perPage + 1;
    if (items > 0 && toRecord > items) {
        toRecord = items;
    }
    var result = "Showing " + fromRecord + " - " + toRecord;
    if (items > 0) {
        result += " of " + items;
    }
    return result;
}
exports.totals = totals;
function getPaginationSlice(page, items, itemsPerPage, pagesPerSlice) {
    if (pagesPerSlice === void 0) { pagesPerSlice = 5; }
    var actualPage = page - 1;
    var minPage = actualPage - (actualPage % pagesPerSlice);
    var maxPage = pagesFromItems(items, itemsPerPage);
    var range = __spread(Array(pagesPerSlice).keys()).map(function (i) {
        var pageNumber = i + minPage + 1;
        var selected = page === pageNumber;
        return { label: pageNumber, selected: selected };
    })
        .filter(function (i) { return i.label <= maxPage; });
    return range;
}
exports.getPaginationSlice = getPaginationSlice;
//# sourceMappingURL=pagination.js.map